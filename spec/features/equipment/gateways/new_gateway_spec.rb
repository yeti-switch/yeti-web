# frozen_string_literal: true

RSpec.describe 'Create new Gateway', type: :feature, js: true do
  subject do
    aa_form.submit
  end

  include_context :login_as_admin
  active_admin_form_for Gateway, 'new'

  include_context :incoming_registrations_stub_helpers do
    let(:stub_incoming_registrations_collection_query) do
      { auth_id: a_kind_of(Integer), empty_on_error: false }
    end
    before do
      FactoryBot.create(:node)
      stub_incoming_registrations_collection
    end
  end

  let!(:contractor) { FactoryBot.create(:customer) }
  let!(:codec_group) { FactoryBot.create(:codec_group) }

  before do
    FactoryBot.create(:customer)
    FactoryBot.create(:vendor)
    FactoryBot.create(:codec_group)

    visit new_gateway_path

    aa_form.set_text 'Name', 'gw123'
    aa_form.select_chosen 'Contractor', contractor.display_name
    aa_form.switch_tab 'Media'
    aa_form.select_chosen 'Codec group', codec_group.display_name
  end

  context 'with termination' do
    before do
      aa_form.switch_tab 'Signaling'
      aa_form.set_text 'Host', '192.168.112.12'
    end

    it 'creates record' do
      subject
      record = Gateway.last
      expect(record).to be_present
      expect(record).to have_attributes(
        contractor_id: contractor.id,
        name: 'gw123',
        host: '192.168.112.12',
        allow_termination: true,
        codec_group_id: codec_group.id
      )
    end

    include_examples :changes_records_qty_of, Gateway, by: 1
    include_examples :shows_flash_message, :notice, 'Gateway was successfully created.'
  end

  context 'without termination' do
    before do
      aa_form.switch_tab 'General'
      aa_form.set_checkbox 'Allow termination', false
    end

    it 'creates record' do
      subject
      record = Gateway.last
      expect(record).to be_present
      expect(record).to have_attributes(
        contractor_id: contractor.id,
        name: 'gw123',
        host: '',
        allow_termination: false,
        codec_group_id: codec_group.id
      )
    end

    include_examples :changes_records_qty_of, Gateway, by: 1
    include_examples :shows_flash_message, :notice, 'Gateway was successfully created.'
  end

  context 'validate autogenerated credentials' do
    active_admin_form_for Gateway, 'new'
    let(:stub_incoming_registrations_collection) { nil }

    before do
      aa_form.switch_tab 'Signaling'
    end

    context 'when credentials is empty' do
      it 'should generate new credential by click on the link in hint for :incoming_auth_username with 20 chars' do
        click_link('小lick to fill random username')
        incoming_auth_username = find_field('gateway_incoming_auth_username')
        expect(incoming_auth_username).to be_present
        expect(incoming_auth_username.value).to be_present
        expect(incoming_auth_username.value).to match(/\A[a-zA-Z0-9]+\z/)
        expect(incoming_auth_username.value.length).to eq(20)
      end

      it 'should generate new credential by click on the link in hint for :incoming_auth_password with 20 chars' do
        click_link('小lick to fill random password')
        incoming_auth_password = find_field('gateway_incoming_auth_password')
        expect(incoming_auth_password).to be_present
        expect(incoming_auth_password.value).to be_present
        expect(incoming_auth_password.value).to match(/\A[a-zA-Z0-9]+\z/)
        expect(incoming_auth_password.value.length).to eq(20)
      end

      it 'should not autogenerate new credential for :incoming_auth_username' do
        incoming_auth_username = find_field('gateway_incoming_auth_username')
        expect(incoming_auth_username).to be_present
        expect(incoming_auth_username.value).to be_empty
      end

      it 'should not autogenerate new credential for :incoming_auth_password' do
        incoming_auth_password = find_field('gateway_incoming_auth_password')
        expect(incoming_auth_password).to be_present
        expect(incoming_auth_password.value).to be_empty
      end
    end

    context 'when credentials are present' do
      before do
        aa_form.set_text 'gateway_incoming_auth_username', 'TestCredential'
        aa_form.set_text 'gateway_incoming_auth_password', 'TestCredential'
      end

      it 'should generate new credential by click on the link in hint for :incoming_auth_username with 20 chars' do
        click_link('小lick to fill random username')
        incoming_auth_username = find_field('gateway_incoming_auth_username')
        expect(incoming_auth_username).to be_present
        expect(incoming_auth_username.value).to be_present
        expect(incoming_auth_username.value).to match(/\A[a-zA-Z0-9]+\z/)
        expect(incoming_auth_username.value.length).to eq(20)
        expect(incoming_auth_username.value).not_to eq('TestCredential')
      end

      it 'should generate new credential by click on the link in hint for :incoming_auth_password with 20 chars' do
        click_link('小lick to fill random password')
        incoming_auth_password = find_field('gateway_incoming_auth_password')
        expect(incoming_auth_password).to be_present
        expect(incoming_auth_password.value).to be_present
        expect(incoming_auth_password.value).to match(/\A[a-zA-Z0-9]+\z/)
        expect(incoming_auth_password.value.length).to eq(20)
        expect(incoming_auth_password.value).not_to eq('TestCredential')
      end

      it 'should not autogenerate new credential for :incoming_auth_username' do
        incoming_auth_username = find_field('gateway_incoming_auth_username')
        expect(incoming_auth_username).to be_present
        expect(incoming_auth_username.value).to be_present
        expect(incoming_auth_username.value).to eq('TestCredential')
      end

      it 'should not autogenerate new credential for :incoming_auth_password' do
        incoming_auth_password = find_field('gateway_incoming_auth_password')
        expect(incoming_auth_password).to be_present
        expect(incoming_auth_password.value).to be_present
        expect(incoming_auth_password.value).to eq('TestCredential')
      end
    end
  end
end
